/* 
 * Variables
 */

// Typography
$base-font: 20px;
$line-height: 1.5;
$serif: 'Neuton', serif;
$sans-serif: 'Open Sans', sans-serif;
$monospace: 'Hack', 'Source Code Pro', 'Droid Sans Mono', monospace;

// Colors
$mineshaft: rgba(51, 51, 51, 1);
$blackhunt: rgba(0, 0, 0, 0.2);
$lilywhite: rgba(234, 234, 234, 1);
$mercury: rgba(230, 230, 230, 1);
$armadillo: rgba(74, 74, 74, 1);
$googleblue: rgba(69, 134, 243, 1);

// Monokai
$rangoon-green: rgba(30, 30, 25, 1);
$pablo: rgba(118, 112, 92, 1);
$turquoiseblue: #5DD9F3;
$inchworm: rgba(171, 223, 0, 1);
$radical-red: #FB2E72; // Sass color functions don't like rgba... ?
$confetti: rgba(234, 217, 92, 1);

// General screen sizes
$medium: 640px;
$large: 1024px;
$xlarge: 1440px;

// Media Queries
$small-screen:  'only screen';
$medium-screen: 'only screen and (min-width: #{$medium})';
$large-screen:  'only screen and (min-width: #{$large})';
$xlarge-screen: 'only screen and (min-width: #{$xlarge})';

// Easing functions
$ease: (
  in-out-quad:  cubic-bezier(0.455,  0.030, 0.515, 0.955),
  in-out-cubic: cubic-bezier(0.645,  0.045, 0.355, 1.000),
  in-out-quart: cubic-bezier(0.770,  0.000, 0.175, 1.000),
  in-out-quint: cubic-bezier(0.860,  0.000, 0.070, 1.000),
  in-out-circ:  cubic-bezier(0.785,  0.135, 0.150, 0.860),
  swift-out:    cubic-bezier(0.550,  0.000, 0.100, 1.000),
  material:     cubic-bezier(0.400,  0.000, 0.200, 1.000)
);

/*
 * Mixins
 */
@mixin cf {
  &:before,
  &:after {
    content: "";
    display: table;
  }

  &:after {
    clear: both;
  }
}

/*
 * Utilities
 */

/*
 * @section Functions
 */

/*
 * Easing
 *
 * Gets easing function from $ease map
 * @param {$key} key (name) of specific easing function to return
 */
@function ease($key) {
  @if map-has-key($ease, $key) {
    @return map-get($ease, $key);
  }

  @warn "Unknown '#{$key}' in $ease.";
  @return null;
}

/*
 * rem/em Calculator
 *
 * target / context = result
 * @param {$target}  Target size in pixels (ie. 32px)
 * @param {$context} Font size providing context for proportion, defaults to $base-font)
 * @param {$unit} unit for rem/em output, defaults to 'em'
 */
@function em-calc($target, $context: $base-font, $unit: 'rem'){
  @return #{$target/$context} + $unit;
}

/*
 * Exponent Calculator
 *
 * https://gist.github.com/scottkellum/1160816
 * @param {$base} base number
 * @param {$exponent} exponent/power number
 */
@function exponent($base, $exponent){
  // reset value
  $value: $base;
  
  // Positive intergers get multiplied
  @if $exponent > 1 {
    @for $i from 2 through $exponent {
      $value: $value * $base;
    }
  }
  
  // Negitive integers get divided. 
  // A number divided by itself is 1
  @if $exponent < 1 {
    @for $i from 0 through -$exponent {
      $value: $value / $base;
    }
  }

  // Return the last value written
  @return ($value);
}

/*
 * Type Scale Calculator
 * 
 * Create typographic scales
 * @param {$i} increment of scale; 0 is base
 * @param {$scale} scale ratio; defaults to 1.25
 */
@function type-scale($i, $scale: 1.25){
  @return exponent($scale, $i) * 1em;
}