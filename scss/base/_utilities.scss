/* 
 * Variables
 */

// Typography
$base-font: 20px;
$line-height: 1.5;
$serif: 'Neuton', serif;
$sans-serif: 'Open Sans', sans-serif;

// Colors
$blackhunt: RGBA(0, 0, 0, 0.2);
$lilywhite: RGBA(234, 234, 234, 1);
$mercury: RGBA(230, 230, 230, 1);
$pablo: RGBA(118, 112, 92, 1);
$armadillo: RGBA(74, 74, 74, 1);
$rangoon-green: RGBA(30, 30, 25, 1);
$radical-red: RGBA(251, 46, 114, 1);

/*
 * Mixins
 */
@mixin cf {
  &:before,
  &:after {
    content: "";
    display: table;
  }

  &:after {
    clear: both;
  }
}

/*
 * Utilities
 */

/*
 * @section Functions
 */

/*
 * rem/em Calculator
 *
 * target / context = result
 * @param {$target}  Target size in pixels (ie. 32px)
 * @param {$context} Font size providing context for proportion, defaults to $base-font)
 * @param {$unit} unit for rem/em output, defaults to 'em'
 */
@function em-calc($target, $context: $base-font, $unit: 'rem'){
  @return #{$target/$context} + $unit;
}

/*
 * Exponent Calculator
 *
 * https://gist.github.com/scottkellum/1160816
 * @param {$base} base number
 * @param {$exponent} exponent/power number
 */
@function exponent($base, $exponent){
  // reset value
  $value: $base;
  
  // Positive intergers get multiplied
  @if $exponent > 1 {
    @for $i from 2 through $exponent {
      $value: $value * $base;
    }
  }
  
  // Negitive integers get divided. 
  // A number divided by itself is 1
  @if $exponent < 1 {
    @for $i from 0 through -$exponent {
      $value: $value / $base;
    }
  }

  // Return the last value written
  @return ($value);
}

/*
 * Type Scale Calculator
 * 
 * Create typographic scales
 * @param {$i} increment of scale; 0 is base
 * @param {$scale} scale ratio; defaults to 1.25
 */
@function type-scale($i, $scale: 1.25){
  @return exponent($scale, $i) * 1em;
}

/**
 * Media Queries
 */
$small-screen:  'only screen';
$medium-screen: 'only screen and (min-width: 640px)';
$large-screen:  'only screen and (min-width: 1024px)';
$xlarge-screen: 'only screen and (min-width: 1440px)';